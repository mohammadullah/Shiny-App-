update.packages(ask='graphics',checkBuilt=TRUE)
version
update
update r
exit()
q()
version
q()
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
.Library
.Library
dir()
library(datasets)
library(UsingR)
install.packages("UsingR")
library(UsingR)
install.packages("Hmisc")
library(UsingR)
install.packages("checkmate")
library(UsingR)
data <- galton
head(data)
plot(data$parent, data$child)
plot(data$parent, jitter(data$child)
plot(data$parent, jitter(data$child))
fit1 <- lm(data$parent ~ data$child)
abline(fit1)
abline(fit1, lwd = 3, color = "blue")
abline(fit1, lwd = 3, colors = "blue")
abline(fit1, lwd = 3, col = "blue")
abline(fit1, lwd = 3, col = "blue")
?abline
abline(fit1, lty = 3, col = "blue")
abline(fit1, lwd = 3, colors = "blue")
abline(fit1, lwd = 3, col = "blue")
abline(fit1, lty = 3, col = "blue")
abline(fit1, lty = 3, col = "blue")
plot(data$parent, jitter(data$child))
plot(data$parent, jitter(data$child))
abline(fit1, lty = 3, col = "blue")
abline(fit1, lwd = 3, col = "blue")
summary(fit1)$coef
fit1 <- lm(data$parent ~ data$child - 1)
abline(fit1, lwd = 3, col = "red")
abline(intersecpt = 0, slope = 1, lwd = 3, col = "green")
?abline
abline(intercecpt = 0, slope = 1, lwd = 3, col = "green")
abline(intercecpt = 0, slope = 1, lwd = 3)
plot(data$parent, jitter(data$child))
plot(data$parent, jitter(data$child))
plot(data$parent, jitter(data$child))
abline(intercecpt = 0, slope = 1, lwd = 3, col = "green")
abline(a = 0, b = 1, lwd = 3, col = "green")
plot(data$parent, data$child)
fit1 <- predict(lm(data$parent ~ data$child))
abline(fit1, lwd = 3, col = "red")
plot(data$parent, fit1)
fit1 <- lm(data$parent ~ data$child - 1)
plot(data$parent, data$child)
fit1 <- lm(data$parent ~ data$child)
abline(fit1, lwd = 3, col = "red")
fit1 <- lm(data$child ~ data$parent)
abline(fit1, lwd = 3, col = "red")
.04114*2
0.08228 + .64629
0.08228 - .64629
abline(v = mean(data$parent), lwd = 3, col = "green")
abline(h = mean(data$child), lwd = 3, col = "green")
install.packages("devtools")
devtools::install_github("jhudsl/collegeIncome")
library(collegeIncome)
data(college)
devtools::install_github("jhudsl/matahari")
library(matahari)
dance_start(value = FALSE, contents = FALSE)
str(college)
new_set <- subset(college, select = c("rank", "major_code", "major_category", "median"))
head(new_set)
unique(new_set$major_category)
plot(new_set$major_category, new_set$median)
library(UsingR)
head(swiss)
test <- aggregate(new_set, by = list(major_category, median), FUN = sum)
test <- aggregate(new_set, by = list(new_set$major_category, new_set$median), FUN = sum)
head(mtcars)
str(mtcars)
test <- table(new_set$major_category, new_set$median)
head(test)
head(new_set)
library(dplyr)
test <- new_set %>% group_by(major_category) %>% summarise(total = sum(median))
head(test)
plot(test$major_category, test$total)
str(test)
test1 <- test
test1$major_category <- as.factor(test1$major_category)
head(test1)
plot(test1$major_category, test1$total)
version
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
summary(Wage)
str(Wage)
inTrain <- createDataPartition( y = Wage$wage, p = 0.7, list = FALSE)
training <- Wage[inTrain]
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[, c("age","education", "jobclass")], y = training$wage, plot = "pairs")
qplot(age, wage, data = training)
qplot(age, wage, color = jobclass, data = training)
g <- qplot(age, wage, color = education, data = training)
g
g <- g + geom_smooth(method = "lm", formula = y ~ x)
g
library(Hmisc)
install.packages(c("broom", "car", "hms", "lubridate", "Rcpp", "RcppEigen", "tidyselect", "tidyverse"))
install.packages(c("glue", "htmlTable", "lazyeval", "openssl", "rlang", "rmarkdown", "stringi", "yaml"), lib="C:/Program Files/R/R-3.4.3/library")
install.packages(c("broom", "car", "hms", "lubridate", "Rcpp", "RcppEigen", "tidyselect", "tidyverse"))
install.packages(c("broom", "car", "hms", "lubridate", "Rcpp", "RcppEigen", "tidyselect", "tidyverse"))
install.packages(c("broom", "car", "hms", "lubridate", "Rcpp", "RcppEigen", "tidyselect", "tidyverse"))
install.packages(c("glue", "htmlTable", "lazyeval", "openssl", "rlang", "rmarkdown", "stringi", "yaml"), lib="C:/Program Files/R/R-3.4.3/library")
install.packages("htmlTable", lib="C:/Program Files/R/R-3.4.3/library")
install.packages("htmlTable")
library(caret)
library(ggplot2)
.libPaths()
install.packages("yaml")
library(caret)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(Rcpp)
library(Rcpp)
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
library(ggplot2)
library(caret)
data(Wage)
library(ISLR)
data(Wage)
data(Wage)
shiny::runApp('D:/data_science/R_dir/data_product/thirdapp')
?brushedPoints
head(trees)
model <- reactive({
brushed_data <- brushedPoints(trees, input$brush1,
xvar = "Girth", yvar = 'Volume')
if(nrow(brushed_data) < 2){
return(NULL)
}
lm(Volume ~ Girth, data = brushed_data)
})
class(model)
runApp('D:/data_science/R_dir/data_product/thirdapp')
mod <- lm(Volume ~ Girth, data = trees)
l <- mod[[1]][2]
l
l <- mod[[1]][1]
mod
mod()[[1]][1]
plot(trees$Girth, trees$Volume)
abline(mod)
install.packages("miniUI")
version
install.packages("plotly")
library(plotly)
plot_ly(mtcars, X = mpg, Y = hp)
plot_ly(mtcars, x = mpg, y = hp, mode = "markers")
plot_ly(mtcars, x = mpg, y = wt, mode = "markers")
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = wt, y = hp, mode = "markers")
?plot_ly
str(mtcars)
plot_ly(mtcars, x = ~wt, y = ~hp, mode = "markers")
plot_ly(mtcars, x = ~wt, y = ~hp, type = "markers")
plot_ly(mtcars, x = ~wt, y = ~hp, type = "scatter")
plot_ly(mtcars, x = ~wt, y = ~hp, type = "scatter", mode = "markers")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", mode = "markers")
plot_ly(mtcars, x = wt, y = mpg, type = "scatter", mode = "markers")
plot_ly(mtcars, x = wt, y = mpg, type = "scatter", mode = "markers")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", mode = "markers")
http://hich-level.appspot.com/?method=blob&name=QW52c29mdF9TeW5jaU9TX1Byb2Zlc3Npb25hbF82XzIuemlw&v=eyJ0cmFuc2FjdGlvbl9pZCI6IjQzNTMyODA1NiJ9
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
runApp('D:/data_science/R_dir/data_product/thirdapp')
runApp('D:/data_science/R_dir/data_product/fourthapp')
?sliderInput
runApp('D:/data_science/R_dir/data_product/fourthapp')
runApp('D:/data_science/R_dir/data_product/fourthapp')
runApp('D:/data_science/R_dir/data_product/fourthapp')
pickXY(my_data)
library(shiny)
library(miniUI)
pickXY <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
?pickXY
??pickXY
library(shiny)
library(miniUI)
?pickXY
?pickxy
?pickxy()
?pickXY()
runApp('D:/data_science/R_dir/data_product/fourthapp')
runApp('D:/data_science/R_dir/data_product/fourthapp')
library(shiny)
library(miniUI)
pickXY <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
pickXY()
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
pickXY()
data_frame <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY()
install.packages("leaflet")
library(leaflet)
df %>% leaflet() %>% addTiles()
addTiles(leaflet(df()))
addTiles(leaflet(df))
leaflet(addTiles(df))
leaflet(df) %>% addTiles()
df(leaflet(addTiles()))
lm()
?lm
lm()
setwd("D:/data_science/R_dir/data_product/week_4/project_1st/")
getwd()
dir()
setwd("cars1/")
dir()
shiny::runApp()
runApp()
